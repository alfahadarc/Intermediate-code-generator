Line 1: parameter_list  : type_specifier ID
int a

Line 3:factor	: variable
a

Line 3:unary_expression : factor
a

Line 3: term : unary_expression
a

Line 3:statement: RETURN expression SEMICOLON
return ;

Line 3: statements : statement

return ;

Line 4:compound_statement : LCURL statements RCURL 
{
return ;}


ScopeTable # 1.1 
list: 7 -> <a:ID>
ScopeTable # 1 
list: 3 -> <fun:ID>


Line 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
int fun ( int a ) {
return ;}

Line 4: unit : func_definition
int fun(int a){
return ;} 

Line 4: program : unit
int fun(int a){
return ;} 

Line 7: statement : var_declaration


Line 7: statements : statement


Line 8: factor: CONST_INT
2

Line 8:unary_expression : factor
2

Line 8: term : unary_expression
2

Line 8: arguments : logic_expression
 

Line 8: argument_list : arguments
 

Line 8:factor: ID LPAREN argument_list RPAREN
fun()

Line 8:unary_expression : factor
fun()

Line 8: term : unary_expression
fun()

Line 8: expression_statement 	: expression SEMICOLON
;

Line 8: statement : expression_statement
;

Line 8: statements : statements statement
 ;

Line 9:compound_statement : LCURL statements RCURL 
{;}


ScopeTable # 1.2 
list: 7 -> <a:ID>
list: 8 -> <b:ID>
list: 9 -> <c:ID>
ScopeTable # 1 
list: 3 -> <fun:ID>
list: 7 -> <main:ID>


Line 9: func_definition : type_specifier ID LPAREN RPAREN compound_statement
int main (  ) {;}

Line 9: unit : func_definition
int main(){;} 

Line 9: program : program unit
int fun(int a){
return ;} int main(){;}

Line 9: start: program
int fun(int a){
return ;} int main(){;} 

